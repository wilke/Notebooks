{"data":{"worksheets":[{"cells":[{"source":"How to Use the RESTful Microbial Communities API in Python","cell_type":"heading","metadata":{},"level":1},{"source":"Using the RESTful API is one way to access and query KBase. The Microbial Communities API facilitates data access and retrieval of metagenomic data.\nThe API is based on web technology (http) which means that you can construct URLs and use them in your browser. Data returned by the API is in JSON format. For many browsers, a plugin exists to render the returned JSON data structure more easily readable. In addition, many programming languages support JSON and provide functionalities to transform JSON into internal data structures or vice versa. \n\nIn the following Narrative, we will demonstrate how to use the RESTful Microbial Communities API in Python.","cell_type":"markdown","metadata":{}},{"source":"Introduction","cell_type":"heading","metadata":{},"level":2},{"source":"Accessing the API is as easy as accessing a web page. The base URL http://kbase.us/services/communities is the stable part of the URL and if invocted, returns a list of available resources (or functions):\n\n

    \n
    project\n
    sample\n
    library\n
    metagenome\n
    profile\n
    annotation\n
    download\n
    compute\n
    inbox\n
    M5NR\n
    matrix\n
    metadata\n
    validation\n

\nFor more documentation, please see the Microbial Communities API Overview, available here.\n","cell_type":"markdown","metadata":{}},{"source":"Example","cell_type":"heading","metadata":{},"level":2},{"source":"In this example, we will cover how to search projects with samples from soil, and retrieve abundance data for one sample.","cell_type":"markdown","metadata":{}},{"source":"In order to do this, we have to:\n\n 1. Use the communities API, especially the project and metagenome resource\n 2. Define functions to communicate with the service\n 3. Search for samples from soil\n 4. Retrieve taxonomic abundancies for a sample","cell_type":"markdown","metadata":{}},{"source":"We will begin by importing modules. These are required to use the http protocol and transform JSON structures into programming language specific data structures.","cell_type":"markdown","metadata":{}},{"cell_type":"code","language":"python","outputs":[],"collapsed":false,"prompt_number":2,"input":"# Basic Python modules for http and json encoding/decoding\nimport urllib2\nimport json","metadata":{}},{"source":"Next, we will set the base URL to retrieve metagenomes. The return structure is in JSON. The service can be accessed through the following URL: http://kbase.us/services/communities","cell_type":"markdown","metadata":{}},{"cell_type":"code","language":"python","outputs":[],"collapsed":false,"prompt_number":3,"input":"base = 'http://kbase.us/services/communities'","metadata":{}},{"source":"Now, we will define convenience functions. This is done so that we don't have to repeat the same lines.\n\n - **retrieve_data()** is a generic function retrieving JSON from a given URL and transforming the JSON into a Python data structure\n - **get_metagenome()** is a function to query the metagenome resource; it makes use of the generic retrieve_data() function","cell_type":"markdown","metadata":{}},{"cell_type":"code","language":"python","outputs":[],"collapsed":false,"prompt_number":15,"input":"# Create a http request and return data\n# Input is a resource name, e.g. metagenome, and an option string\n# Returns a Python data structure derived from the loaded json \n\ndef retrieve_data( resource,options ):\n # Build query url\n if resource :\n url = base + \"/\" + resource \n if options :\n url = url + \"/\" +options\n print \"Query \" + url + \"\\n\"\n # Request data from url\n response = urllib2.urlopen(url)\n # Read response and decode json\n text = response.read()\n data = json.loads(text)\n return data\n \n ","metadata":{}},{"cell_type":"code","language":"python","outputs":[],"collapsed":false,"prompt_number":16,"input":"def get_metagenomes( options ) :\n if not options :\n options = \"?limit=100\"\n tmp = retrieve_data('metagenome' , options)\n # expecting a list of metagenomes , the list is defined in the data block of the returned data structure\n return tmp['data']","metadata":{}},{"cell_type":"code","language":"python","outputs":[],"collapsed":false,"prompt_number":17,"input":"def get_metagenome( id , options ) :\n if not options :\n options = \"?limit=100\"\n if id :\n options = id + \"/\" + options\n mg = retrieve_data('metagenome' , options) \n return mg\n ","metadata":{}},{"source":"Here, we will use the get_metagenomes and get_metagenome function. We will retrieve 100 metagenome IDs, but only print the first nine (see \"for m in myMetagenomeList[0:9]\").","cell_type":"markdown","metadata":{}},{"cell_type":"code","language":"python","outputs":[{"output_type":"stream","stream":"stdout","text":"Query http://kbase.us/services/communities/metagenome/?limit=100\n\nmgm4440026.3"},{"output_type":"stream","stream":"stdout","text":"\nmgm4440036.3\nmgm4440037.3\nmgm4440038.3\nmgm4440039.3\nmgm4440040.3\nmgm4440041.3\nmgm4440051.3\nmgm4440052.3\n"}],"collapsed":false,"prompt_number":19,"input":"myMetagenomeList = get_metagenomes('')\n\nfor m in myMetagenomeList[0:9] :\n print m['id']","metadata":{}},{"source":"Let's pick an ID from the list above. For this example, let's choose mgm4440026.3. The get_metagenome function retrieves data for this ID.","cell_type":"markdown","metadata":{}},{"cell_type":"code","language":"python","outputs":[{"output_type":"stream","stream":"stdout","text":"Query http://kbase.us/services/communities/metagenome/mgm4440026.3/?limit=100\n\n{u'status': u'public', u'sample': [u'mgs12326', u'http://kbase.us/services/communities/sample/mgs12326'], u'name': u'CFLungPat001Rep1SDVir20060505', u'created': u'2007-04-27 14:47:11', u'url': u'http://kbase.us/services/communities/metagenome/mgm4440026.3?verbosity=minimal', u'pipeline_parameters': {u'bowtie': u'yes', u'screen_indexes': u'h_sapiens_asm', u'm5nr_annotation_version': u'1', u'filter_ln': u'yes', u'filter_ambig': u'yes', u'file_type': u'fna', u'm5nr_sims_version': u'7', u'aa_pid': u'90', u'max_ambig': u'5', u'm5rna_sims_version': u'7', u'filter_ln_mult': u'2.0', u'rna_pid': u'97', u'prefix_length': u'50', u'fgs_type': u'454', u'm5rna_annotation_version': u'1', u'assembled': u'no', u'dereplicate': u'yes'}, u'library': [u'mgl43388', u'http://kbase.us/services/communities/library/mgl43388'], u'sequence_type': u'WGS', u'project': [u'mgp31', u'http://kbase.us/services/communities/project/mgp31'], u'version': 1, u'pipeline_version': u'3.0', u'id': u'mgm4440026.3'}"},{"output_type":"stream","stream":"stdout","text":"\n"}],"collapsed":false,"prompt_number":23,"input":"myMetagenome = get_metagenome('mgm4440026.3','')\n\nprint myMetagenome","metadata":{}},{"source":"We want to be able to easily read the returned results. In order to make the returned data structure more easily understood, we will use a Python library for printing (pprint).","cell_type":"markdown","metadata":{}},{"cell_type":"code","language":"python","outputs":[{"output_type":"stream","stream":"stdout","text":"{u'created': u'2007-04-27 14:47:11',\n u'id': u'mgm4440026.3',\n u'library': [u'mgl43388',\n u'http://kbase.us/services/communities/library/mgl43388'],\n u'name': u'CFLungPat001Rep1SDVir20060505',\n u'pipeline_parameters': {u'aa_pid': u'90',\n u'assembled': u'no',\n u'bowtie': u'yes',\n u'dereplicate': u'yes',\n u'fgs_type': u'454',\n u'file_type': u'fna',\n u'filter_ambig': u'yes',\n u'filter_ln': u'yes',\n u'filter_ln_mult': u'2.0',\n u'm5nr_annotation_version': u'1',\n u'm5nr_sims_version': u'7',\n u'm5rna_annotation_version': u'1',\n u'm5rna_sims_version': u'7',\n u'max_ambig': u'5',\n u'prefix_length': u'50',\n u'rna_pid': u'97',\n u'screen_indexes': u'h_sapiens_asm'},\n u'pipeline_version': u'3.0',\n u'project': [u'mgp31', u'http://kbase.us/services/communities/project/mgp31'],\n u'sample': [u'mgs12326',\n u'http://kbase.us/services/communities/sample/mgs12326'],\n u'sequence_type': u'WGS',\n u'status': u'public',\n u'url': u'http://kbase.us/services/communities/metagenome/mgm4440026.3?verbosity=minimal',\n u'version': 1}\n"}],"collapsed":false,"prompt_number":24,"input":"import pprint\npprint.pprint(myMetagenome)","metadata":{}},{"source":"Searching for Metagenomes","cell_type":"heading","metadata":{},"level":2},{"source":"At this time, we will demonstrate how to search for metagenomes from soil. ","cell_type":"markdown","metadata":{}},{"source":"Information you need to construct your search:\n\n\n\n\n\n\n
Base URL 	http://kbase.us/services/communities/
Resource 	metagenome
Options	biome=soil and limit=10
Result 	List of metagenomes
","cell_type":"markdown","metadata":{}},{"source":"We will reduce the number of returned search results using limit. In this example, if more than 10 metagenomes from soil are found, only the first 10 are returned.","cell_type":"markdown","metadata":{}},{"cell_type":"code","language":"python","outputs":[{"output_type":"stream","stream":"stdout","text":"Query URL: http://kbase.us/services/communities/metagenome?biome=soil&limit=10\n\n# found:\t\t244"},{"output_type":"stream","stream":"stdout","text":"\n# this batch:\t10\nPrevious batch:\tNone\nNext batch:\thttp://kbase.us/services/communities/metagenome?biome=soil&limit=10&verbosity=minimal&order=id&direction=asc&match=all&status=both&offset=10\n"}],"collapsed":false,"prompt_number":70,"input":"# Base url is already defined, see top of the document\nresource = 'metagenome'\noptions = 'biome=soil&limit=10'\n\n# Build query URL\nurl = base + \"/\" + resource + \"?\" + options\n\nprint \"Query URL: \" + url + \"\\n\"\n \nresponse = urllib2.urlopen(url)\ntext = response.read()\nmlist = json.loads(text)\n\n# you can uncomment one of lines below to see how the data structure looks like,\n# print mlist\n# pprint.pprint(mlist)\n\n# Print \nprint \"# found:\\t\\t\" + str( mlist['total_count'] )\nprint \"# this batch:\\t\" + str(len(mlist['data']))\nprint \"Previous batch:\\t\" + str(mlist['prev'])\nprint \"Next batch:\\t\" + str(mlist['next'])","metadata":{}},{"source":"Here, we will print out the list of IDs and metagenome names.","cell_type":"markdown","metadata":{}},{"cell_type":"code","language":"python","outputs":[{"output_type":"stream","stream":"stdout","text":"mgm4440026.3 \tCFLungPat001Rep1SDVir20060505\nmgm4440036.3 \tKingLIVir20050821\nmgm4440037.3 \tKingLIMic20050821\nmgm4440038.3 \tXmasLIVir20050805\nmgm4440039.3 \tPalmLIMic20050818\nmgm4440040.3 \tPalmLIVir20050818\nmgm4440041.3 \tXmasLIMic20050805\nmgm4440051.3 \tCFLungPat001Rep2SDVir20060505\nmgm4440052.3 \tMosq1SDVir20060125\nmgm4440053.3 \tMosqDigSDVir20060606\n"}],"collapsed":false,"prompt_number":57,"input":"for metagenome in mlist['data'] : \n print metagenome['id'] , '\\t' , metagenome['name'] ","metadata":{}},{"source":"Now, let's link to a landing page for metagenomes. The base URL for metagenome landing pages is: http://kbase.us/metagenome/$metagenomeID\n\n(where $metagenomeID is the ID you provide for your metagenome of interest).\n","cell_type":"markdown","metadata":{}},{"cell_type":"code","language":"python","outputs":[{"output_type":"stream","stream":"stdout","text":"mgm4440026.3 \tCFLungPat001Rep1SDVi \thttp://kbase.us/metagenome/mgm4440026.3\nmgm4440036.3 \tKingLIVir20050821 \thttp://kbase.us/metagenome/mgm4440036.3\nmgm4440037.3 \tKingLIMic20050821 \thttp://kbase.us/metagenome/mgm4440037.3\nmgm4440038.3 \tXmasLIVir20050805 \thttp://kbase.us/metagenome/mgm4440038.3\nmgm4440039.3 \tPalmLIMic20050818 \thttp://kbase.us/metagenome/mgm4440039.3\nmgm4440040.3 \tPalmLIVir20050818 \thttp://kbase.us/metagenome/mgm4440040.3\nmgm4440041.3 \tXmasLIMic20050805 \thttp://kbase.us/metagenome/mgm4440041.3\nmgm4440051.3 \tCFLungPat001Rep2SDVi \thttp://kbase.us/metagenome/mgm4440051.3\nmgm4440052.3 \tMosq1SDVir20060125 \thttp://kbase.us/metagenome/mgm4440052.3\nmgm4440053.3 \tMosqDigSDVir20060606 \thttp://kbase.us/metagenome/mgm4440053.3\n"}],"collapsed":false,"prompt_number":69,"input":"landingPageURL='http://kbase.us/metagenome/'\n\nfor metagenome in mlist['data'] : \n print metagenome['id'] , \"\\t\" , metagenome['name'][0:20] , \"\\t\" , landingPageURL + metagenome['id'] ","metadata":{}},{"source":"We will retrieve all hits from the search above. We have already defined the query URL and did receive the first batch. The data is stored in the 'mlist'. As shown above, mlist contains a key 'next' containing a URL for retrieving the next batch. ","cell_type":"markdown","metadata":{}},{"cell_type":"code","language":"python","outputs":[{"output_type":"stream","stream":"stdout","text":"Query http://kbase.us/services/communities/metagenome?biome=soil&limit=20 \n\nmgm4441091.3"},{"output_type":"stream","stream":"stdout","text":" \tWaseca Farm Soil \tNext: ...?biome=soil&limit=20&verbosity=minimal&order=id&direction=asc&match=all&status=both&offset=20\nmgm4453148.3"},{"output_type":"stream","stream":"stdout","text":" \tPooled_ambient_crust \tNext: ...?biome=soil&limit=20&verbosity=minimal&order=id&direction=asc&match=all&status=both&offset=40\nmgm4455672.3"},{"output_type":"stream","stream":"stdout","text":" \t768 \tNext: ...?biome=soil&limit=20&verbosity=minimal&order=id&direction=asc&match=all&status=both&offset=60\nmgm4455748.3"},{"output_type":"stream","stream":"stdout","text":" \t851 \tNext: ...?biome=soil&limit=20&verbosity=minimal&order=id&direction=asc&match=all&status=both&offset=80\nmgm4455768.3"},{"output_type":"stream","stream":"stdout","text":" \t871 \tNext: ...?biome=soil&limit=20&verbosity=minimal&order=id&direction=asc&match=all&status=both&offset=100\nmgm4455788.3"},{"output_type":"stream","stream":"stdout","text":" \t891 \tNext: ...?biome=soil&limit=20&verbosity=minimal&order=id&direction=asc&match=all&status=both&offset=120\nmgm4455814.3"},{"output_type":"stream","stream":"stdout","text":" \t917 \tNext: ...?biome=soil&limit=20&verbosity=minimal&order=id&direction=asc&match=all&status=both&offset=140\nmgm4455909.3"},{"output_type":"stream","stream":"stdout","text":" \t1012 \tNext: ...?biome=soil&limit=20&verbosity=minimal&order=id&direction=asc&match=all&status=both&offset=160\nmgm4455931.3"},{"output_type":"stream","stream":"stdout","text":" \t1034 \tNext: ...?biome=soil&limit=20&verbosity=minimal&order=id&direction=asc&match=all&status=both&offset=180\nmgm4476876.3"},{"output_type":"stream","stream":"stdout","text":" \t16SV4 amplicons gras \tNext: ...?biome=soil&limit=20&verbosity=minimal&order=id&direction=asc&match=all&status=both&offset=200\nmgm4477059.3"},{"output_type":"stream","stream":"stdout","text":" \t7666.3 \tNext: ...?biome=soil&limit=20&verbosity=minimal&order=id&direction=asc&match=all&status=both&offset=220\nmgm4477283.3"},{"output_type":"stream","stream":"stdout","text":" \t7819.4 \tNext: ...?biome=soil&limit=20&verbosity=minimal&order=id&direction=asc&match=all&status=both&offset=240\nmgm4488524.3"},{"output_type":"stream","stream":"stdout","text":" \tNTS_067_16S_AMB \tNext: ...?biome=soil&limit=20&verbosity=minimal&order=id&direction=asc&match=all&status=both&offset=260\n"}],"collapsed":false,"prompt_number":93,"input":"# Base url is already defined, see top of the document\nresource = 'metagenome'\noptions = 'biome=soil&limit=20'\n\n# Build query URL\nurl = base + \"/\" + resource + \"?\" + options\n\nprint 'Query ' , url , \"\\n\"\n\nwhile (url) :\n\n \n \n # retrieve data from URL\n response = urllib2.urlopen( url )\n text = response.read()\n mlist = json.loads(text)\n \n # print data\n # truncating the list to shorten the output\n # for a complete list replace mlist['data'][0:1] with mlist['data'] \n # and/or increase the limit\n \n for metagenome in mlist['data'][0:1] : \n print metagenome['id'] , \"\\t\" , metagenome['name'][0:20] , \"\\tNext: ...?\" + mlist['next'][48:150]\n \n # Important, set url to next batch\n url = mlist['next'] \n ","metadata":{}},{"source":"Retrieve Taxonomic Abundancies for Two Samples","cell_type":"heading","metadata":{},"level":2},{"source":"We will use the profile and matrix resource to retrieve abundance data for mgm4441091.3 and mgm4447277.3 and compare the two samples. The output is in Biological Observation Matrix (BIOM) format. For a detailed description of the BIOM format, please visit http://biom-format.org/.","cell_type":"markdown","metadata":{}},{"cell_type":"code","language":"python","outputs":[],"collapsed":false,"prompt_number":99,"input":"# Base url is already defined, see top of the document\nID = 'mgm4441091.3'\nresource = 'profile'\noptions = 'source=RefSeq&type=organism'\n\n# Build query URL\nurl = base + \"/\" + resource + \"/\" + ID + \"?\" + options","metadata":{}},{"cell_type":"code","language":"python","outputs":[{"output_type":"stream","stream":"stdout","text":"Query URL: http://kbase.us/services/communities/profile/mgm4441091.3?source=RefSeq&type=organism\n\n"}],"collapsed":false,"prompt_number":228,"input":"\nprint \"Query URL: \" + url + \"\\n\"\n \nresponse = urllib2.urlopen(url)\ntext = response.read()\nprofile = json.loads(text)\n","metadata":{}},{"source":"To view the entire data structure of the profile, execute the line below in a separate cell.\n\n**pprint.pprint(profile)**","cell_type":"markdown","metadata":{}},{"source":"To construct output, print the header first.","cell_type":"markdown","metadata":{}},{"cell_type":"code","language":"python","outputs":[{"output_type":"stream","stream":"stdout","text":"abundance\t|e-value\t|percent identity\t|alignment length\n"}],"collapsed":false,"prompt_number":229,"input":"# print header\n\nmyList = []\n# create a header list\nfor c in profile['columns'] :\n myList.append( str(c['id']) )\n\n# create a string by joining all elements in the list with a tab and print \nprint \"\\t|\".join(myList) \n\n","metadata":{}},{"source":"Use this command to get a list of organisms for the matrix.","cell_type":"markdown","metadata":{}},{"cell_type":"code","language":"python","outputs":[{"output_type":"stream","stream":"stdout","text":"Enterococcus faecalis TX4248\nAmycolatopsis mediterranei U32\ngamma proteobacterium NOR5-3\nEscherichia coli B7A\nEscherichia coli H736\nPolaromonas sp. JS666\nPaludibacter propionicigenes WB4\nComamonas testosteroni CNB-2\nDictyostelium discoideum AX4\nRhodospirillum centenum SW\n"}],"collapsed":false,"prompt_number":137,"input":"# list of organisms\nfor r in profile['rows'][0:10] :\n print str(r['id'])\n ","metadata":{}},{"source":"Here, we will print values for every column defined by the header.","cell_type":"markdown","metadata":{}},{"cell_type":"code","language":"python","outputs":[{"output_type":"stream","stream":"stdout","text":"1\t|-8\t|64.58\t|48\n1\t|-10\t|60.87\t|46\n2\t|-9.5\t|68.58\t|44.5\n1\t|-35\t|88.37\t|86\n3\t|-60.333\t|94.733\t|122\n14\t|-25.357\t|71.439\t|77.143\n2\t|-21\t|74.275\t|65.5\n4\t|-14.5\t|74.035\t|56.5\n2\t|-5.5\t|75.175\t|32\n8\t|-32.5\t|63.989\t|103.625\n"}],"collapsed":false,"prompt_number":140,"input":"myList = []\nfor c in profile['data'][0:10] :\n for i in c :\n myList.append( str(i) ) \n print \"\\t|\".join(myList) \n myList = []\n ","metadata":{}},{"source":"Now, we will combine header, values, and organisms.","cell_type":"markdown","metadata":{}},{"cell_type":"code","language":"python","outputs":[{"output_type":"stream","stream":"stdout","text":"abundance\t|e-value\t|percent identity\t|alignment length\n1\t|-8\t|64.58\t|48\t|Enterococcus faecalis TX4248\n1\t|-10\t|60.87\t|46\t|Amycolatopsis mediterranei U32\n2\t|-9.5\t|68.58\t|44.5\t|gamma proteobacterium NOR5-3\n1\t|-35\t|88.37\t|86\t|Escherichia coli B7A\n3\t|-60.333\t|94.733\t|122\t|Escherichia coli H736\n14\t|-25.357\t|71.439\t|77.143\t|Polaromonas sp. JS666\n2\t|-21\t|74.275\t|65.5\t|Paludibacter propionicigenes WB4\n4\t|-14.5\t|74.035\t|56.5\t|Comamonas testosteroni CNB-2\n2\t|-5.5\t|75.175\t|32\t|Dictyostelium discoideum AX4\n8\t|-32.5\t|63.989\t|103.625\t|Rhodospirillum centenum SW\n1\t|-17\t|62.9\t|62\t|Comamonas testosteroni KF-1\n"}],"collapsed":false,"prompt_number":221,"input":"# print header\n\n# save the data so that we can sort\nmatrix = []\n\nheader = []\nfor c in profile['columns'] :\n # sys.stdout.write( str(c['id']) + \"\\t|\" ) \n header.append( str(c['id']) )\n\nprint \"\\t|\".join(header) \n\n\nrow = []\ncounter = 0\nfor r in profile['data'] :\n for c in r :\n row.append( str(c) )\n row.append( profile['rows'][counter]['id'] ) \n # only print the first 10 rows\n if (counter <= 10) :\n print \"\\t|\".join(row) \n matrix.append(row)\n row = []\n counter = counter + 1","metadata":{}},{"source":"We will look at the first 10 organism on the list. Please note that the list is unsorted.","cell_type":"markdown","metadata":{}},{"cell_type":"code","language":"python","outputs":[{"output_type":"pyout","prompt_number":223,"metadata":{},"text":"[['1', '-8', '64.58', '48', u'Enterococcus faecalis TX4248'],\n ['1', '-10', '60.87', '46', u'Amycolatopsis mediterranei U32'],\n ['2', '-9.5', '68.58', '44.5', u'gamma proteobacterium NOR5-3'],\n ['1', '-35', '88.37', '86', u'Escherichia coli B7A'],\n ['3', '-60.333', '94.733', '122', u'Escherichia coli H736'],\n ['14', '-25.357', '71.439', '77.143', u'Polaromonas sp. JS666'],\n ['2', '-21', '74.275', '65.5', u'Paludibacter propionicigenes WB4'],\n ['4', '-14.5', '74.035', '56.5', u'Comamonas testosteroni CNB-2'],\n ['2', '-5.5', '75.175', '32', u'Dictyostelium discoideum AX4'],\n ['8', '-32.5', '63.989', '103.625', u'Rhodospirillum centenum SW']]"}],"collapsed":false,"prompt_number":223,"input":"matrix[0:10]","metadata":{}},{"source":"Next, we will sort the matrix by abundance and report the most abundant organisms in the sample.","cell_type":"markdown","metadata":{}},{"cell_type":"code","language":"python","outputs":[],"collapsed":false,"prompt_number":224,"input":"# Function to return sort value, in this case the first element of the list\ndef getKey(item):\n return int(item[0])\n\nmatrix.sort( key=getKey , reverse=True )","metadata":{}},{"cell_type":"code","language":"python","outputs":[{"output_type":"pyout","prompt_number":225,"metadata":{},"text":"[['111',\n '-27.396',\n '68.707',\n '85.964',\n u'Candidatus Solibacter usitatus Ellin6076'],\n ['92', '-36.011', '70.766', '101.489', u'bacterium Ellin514'],\n ['92', '-34.272', '71.007', '98.011', u'Gemmatimonas aurantiaca T-27'],\n ['78', '-39.923', '72.272', '107.064', u'Chitinophaga pinensis DSM 2588'],\n ['73', '-26.315', '68.298', '83.822', u\"Sorangium cellulosum 'So ce 56'\"],\n ['71', '-27.662', '98.022', '58.845', u'Ruminococcus albus 8'],\n ['60', '-14.9', '91.306', '45.833', u'Cryptosporidium hominis TU502'],\n ['44', '-46.295', '75.345', '115.818', u'Candidatus Nitrospira defluvii'],\n ['44',\n '-28.5',\n '66.671',\n '89.682',\n u'Candidatus Koribacter versatilis Ellin345'],\n ['43', '-27.907', '67.361', '88.767', u'Haliangium ochraceum DSM 14365']]"}],"collapsed":false,"prompt_number":225,"input":"matrix[0:10]","metadata":{}},{"source":"Last, we will print out for easy readability.","cell_type":"markdown","metadata":{}},{"cell_type":"code","language":"python","outputs":[{"output_type":"stream","stream":"stdout","text":"111\t-27.396\t68.707\t85.964\tCandidatus Solibacter usitatus Ellin6076\n92\t-36.011\t70.766\t101.489\tbacterium Ellin514\n92\t-34.272\t71.007\t98.011\tGemmatimonas aurantiaca T-27\n78\t-39.923\t72.272\t107.064\tChitinophaga pinensis DSM 2588\n73\t-26.315\t68.298\t83.822\tSorangium cellulosum 'So ce 56'\n71\t-27.662\t98.022\t58.845\tRuminococcus albus 8\n60\t-14.9\t91.306\t45.833\tCryptosporidium hominis TU502\n44\t-46.295\t75.345\t115.818\tCandidatus Nitrospira defluvii\n44\t-28.5\t66.671\t89.682\tCandidatus Koribacter versatilis Ellin345\n43\t-27.907\t67.361\t88.767\tHaliangium ochraceum DSM 14365\n37\t-27.676\t67.959\t84.865\tSpirosoma linguale DSM 74\n34\t-37.324\t74.89\t97.471\tBradyrhizobium japonicum USDA 110\n32\t-33.719\t71.148\t94.031\tOpitutus terrae PB90-1\n32\t-28.219\t70.84\t83.313\tAnaeromyxobacter sp. Fw109-5\n31\t-39.645\t77.261\t101.774\tMethylobacter tundripaludum SV96\n31\t-28.968\t67.002\t90.548\tStigmatella aurantiaca DW4/3-1\n30\t-27.533\t71.541\t83.967\tChthoniobacter flavus Ellin428\n30\t-42.133\t71.566\t111.667\tSphingomonas wittichii RW1\n28\t-25.071\t64.141\t83.786\tGemmata obscuriglobus UQM 2246\n28\t-27.5\t66.808\t86.214\tKtedonobacter racemifer DSM 44963\n"}],"collapsed":false,"prompt_number":227,"input":"for r in matrix[0:20] :\n print \"\\t\".join(r) ","metadata":{}}],"metadata":{}}],"nbformat":3,"metadata":{"description":"","creator":"wilke","format":"ipynb","data_dependencies":[],"ws_name":"narrativetester:_communitiesdemo","type":"Narrative","name":"Using the Microbial Communities API with Python"},"nbformat_minor":0},"info":[4,"Using_the_Microbial_Communities_API_with_Python","KBaseNarrative.Narrative-2.0","2014-07-16T14:41:11+0000",76,"narrativetester",1788,"narrativetester:PUBLIC","c9c6613e6a2c51c405dd6d6c1c65fe54",25856,{"ws_name":"narrativetester:_communitiesdemo","description":"","name":"Using the Microbial Communities API with Python","data_dependencies":"[]","format":"ipynb","type":"Narrative","creator":"wilke"}],"provenance":[],"creator":"narrativetester","created":"2014-07-10T20:26:28+0000","refs":[]}